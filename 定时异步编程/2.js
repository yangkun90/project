/*
js中的同步和异步编程
    同步编程：按照步骤顺序执行，当前代码没有执行完成，会在这进行等待，等待执行完成后，再继续执行下面。
    异步编程：当前这件事没有做完，需要一段时间，此时我们不等待，继续执行下面的任务，当后面的任务完成后，再去把没有完成的的事情完成。
    【js中的异步编程】
    1 所有的事件绑定都是异步编程
    2 所有定时器都是异步编程
    3 ajax一般都使用异步编程
    4 回调函数也算是异步编程
 */

//案例 说明没有等待定时器执行，而是直接执行了下面循环，循环是死循环报错，所以，说明定时器是异步的。
let n =0;
setTimeout(function () {
    console.log(++n);//这里没有输出?
},1000);
console.log(n);//这个输出了
while (1==1){
    //死循环
}

//浏览器规划同步异步
//1 浏览器多线程的 js是单线程 浏览器只给一个线程 单线程特点就是一次只能处理一件事情
//2 js在单线程实现异步机制，主要依赖浏览器的任务队列，浏览器中有两个任务队列，一个叫主任务队列，一个叫做等待任务队列。
/*
 1定时器本身是一个主任务队列方法，但是内部的代码需要异步，会放入到等待队列中等待执行
 2 当主任务队列完成后才会到等待任务队列中进行查找，如果主任务队列不完成，不管等待队列任务中是否有到达时间都不会执行，而是继续等待。因为JS本身就是单线程，只能一次处理一件事情。
 3 等待队列中谁达到条件，就会重新放到主任务队列中继续执行。这个任务执行完成后再去等待中继续找。
 */


