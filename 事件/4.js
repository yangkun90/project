/*
事件的传播机制
    冒泡传播：触发当前元素的事件行为，不仅当前元素事件行文触发，而且祖先元素的事件行为也会被依次触发，这种机制就是事件冒泡传播机制。

    1先进行捕获。从window开始项内查找到事件元素。沿途会铺货事件元素的所有父元素。这样就构建出一个冒泡样的层级
    2 把事件源的相关操作行为触发（如果绑定了方法，则把方法执行）
    3 把当前捕获阶段，自内而外的，把当前事源的祖先元素依次触发事件。如果没有绑定方法，就什么都不做，继续向上冒泡。
    所以，子元素的点击事件也会触发父元素的点击，我们没看到是因为父亲没有绑定方法，其实是执行了的。
 */
/*
事件绑定：DOM0事件绑定，给元素绑定方法，这些方法都是当前元素事件行为的冒泡阶段，（或者目标阶段）执行的。
DOM2 xxx.addEventListener('xxx',function(){},false) 第三个参数也是控制绑定的的方法在事件传播的冒泡阶段（或者目标阶段）执行，如果第三个参数为true才代表在事件传播的捕获阶段触发执行。这种捕获阶段没有什么实际的应用。
 */

/*
不同浏览器的对于外层祖先元素的定义不一样：
    谷歌：window->document->html->body
    ie高版本：window->html->body
    ie低版本：html->body
一般来说我们只操作到Body就行了，兼容所有浏览器。
 */
/*
冒泡影响到的所有元素的事件是同一个事件还是每个元素的单独事件？
回答：所有元素受到的事件都是其触发源元素的事件。
 */
/*
关于事件的一些理解：
    1事件对象记录的是本次操作的相关信息，和操作有关，和元素无必然联系。
    2当我们基于鼠标或者键盘等操作的时候，浏览器会把本次操作的信息存储起来（存放到内存堆中）ie低版本会存储到window.event 存储的是一个对象，操作肯定会触发元素的某个行为，把绑定的方法执行，此时标准浏览器会把之前存储的对象，传递给每个执行的方法。所以操作一次，再多的方法中都有时间对象，都是同一个，就是本次操作执行的对象。
 */